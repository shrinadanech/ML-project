import sys
print('python {}'.format(sys.version))
import scipy
print('scipy {}'.format(scipy.__version__))
import numpy
print('numpy {}'.format(numpy.__version__))
import matplotlib
print('matplotlib {}'.format(matplotlib.__version__))
import pandas
print('pandas {}'.format(pandas.__version__))
import sklearn
print('sklearn {}'.format(sklearn.__version__))


import pandas as pd
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier



dataset=pd.read_csv(r"C:\Users\Dell\Downloads\IRIS.csv",)


#dimensions of the dataset
print(dataset.shape)

print(dataset.head(20))

print(dataset.describe())

print(dataset.groupby('species').size())

dataset.plot(kind='box',subplots=True,layout=(2,2),sharex=False,sharey=False)
pyplot.show()

dataset.hist()
pyplot.show()

scatter_matrix(dataset)
pyplot.show()

array=dataset.values
X=array[:,0:4]
Y=array[:,4]
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=1)

models=[]
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC(gamma='auto')))

results= []
names= []
for name,model in models:
    kfold=StratifiedKFold(n_splits=10,random_state=1)
    cv_results=cross_val_score(model,X_train,Y_train,cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))

#compare our models
pyplot.boxplot(results,labels=names)
pyplot.title('ALgorithm Comparison')
pyplot.show()

#predictions on svm
model=SVC(gamma='auto')
model.fit(X_train,Y_train)
predictions=model.predict(X_test)

print(accuracy_score(Y_test,predictions))
print(confusion_matrix(Y_test,predictions))
print(classification_report(Y_test,predictions))

